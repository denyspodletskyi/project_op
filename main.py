import json
from datetime import datetime
from sensor_type import SensorType
from sensor import Sensor
from data_collector import DataCollector
from recommendation import get_recommendation
from decorators import log_action


@log_action
def save_to_json(entry):
    """
    –ó–±–µ—Ä—ñ–≥–∞—î –æ—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ —É —Ñ–∞–π–ª JSON.
    """
    filename = "eco_log.json"
    try:
        with open(filename, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        data = []

    data.append(entry)

    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)


def main():
    """
        –¢—É—Ç–∞ –≤–∫–∞–∑—É—î—Ç—å—Å—è —Ç–∏–ø —Å–µ–Ω—Å–æ—Ä–∞
    """
    temperature = SensorType("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "¬∞C")
    co2 = SensorType("CO2", "ppm")
    pm25 = SensorType("PM2.5", "¬µg/m¬≥")
    humidity = SensorType("–í–æ–ª–æ–≥—ñ—Å—Ç—å", "%")

    available_types = {
        "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": temperature,
        "CO2": co2,
        "PM2.5": pm25,
        "–í–æ–ª–æ–≥—ñ—Å—Ç—å": humidity
    }

    sensors = [
        Sensor("S1", temperature, "–¶–µ–Ω—Ç—Ä"),
        Sensor("S2", co2, "–ü—Ä–æ–º–∑–æ–Ω–∞"),
        Sensor("S3", pm25, "–ñ–∏—Ç–ª–æ–≤–∏–π —Ä–∞–π–æ–Ω"),
        Sensor("S4", humidity, "–ü–∞—Ä–∫")
    ]

    print("üåç –í—ñ—Ç–∞—é —É —Å–∏—Å—Ç–µ–º—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –µ–∫–æ–ª–æ–≥—ñ—á–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ üå±")

    while True:
        print("\nüìå –Ø–∫–∏–π –µ–∫–æ–ª–æ–≥—ñ—á–Ω–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?")
        print("(–æ–±–µ—Ä—ñ—Ç—å: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, CO2, PM2.5, –í–æ–ª–æ–≥—ñ—Å—Ç—å)")
        print("–∞–±–æ –≤–≤–µ–¥—ñ—Ç—å '–î—è–∫—É—é —Ç–æ–±—ñ, –Ω–∞ —Ü—å–æ–º—É –≤—Å–µ' ‚Äî –¥–ª—è –≤–∏—Ö–æ–¥—É")

        choice = input("üëâ –í–∞—à –≤–∏–±—ñ—Ä: ").strip()

        if choice == "–î—è–∫—É—é —Ç–æ–±—ñ, –Ω–∞ —Ü—å–æ–º—É –≤—Å–µ":
            print("\nüíö –î—è–∫—É—é! –ë–µ—Ä–µ–∂—ñ—Ç—å —Å–µ–±–µ —ñ –¥–æ–≤–∫—ñ–ª–ª—è!")
            break

        if choice not in available_types:
            print("‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            continue

        selected_type = available_types[choice]
        collector = DataCollector()

        for sensor in sensors:
            if sensor.sensor_type.name == selected_type.name:
                collector.collect(sensor)

        print(f"\nüìä [–ó–≤—ñ—Ç –ø–æ –ø–æ–∫–∞–∑–Ω–∏–∫—É: {selected_type.name}]")
        for entry in collector.data:
            recommendation = get_recommendation(entry["type"], entry["value"])
            print(
                f"üìç {entry['location']} ‚Äì {entry['type']}: {entry['value']:.2f} {entry['unit']}\n"
                f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: {recommendation}\n"
            )
            """
               –û—Å—å —Ç—É—Ç –∑–∞–ø–∏—Å—É—î—Ç—å—Å—è –¥–∞—Ç–∞ —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è, —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤ eco_log.json 
            """

            entry["timestamp"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            entry["recommendation"] = recommendation

            save_to_json(entry)


if __name__ == "__main__":
    main()
