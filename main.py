import json
from datetime import datetime
from sensor_type import SensorType
from sensor import Sensor
from data_collector import DataCollector
from recommendation import get_recommendation
from decorators import log_action
from validator import verify_reports, validate_value

@log_action
def save_to_json(entry):
    """
    –ó–±–µ—Ä—ñ–≥–∞—î –æ—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ —É —Ñ–∞–π–ª JSON.
    """
    filename = "eco_log.json"
    try:
        with open(filename, "r", encoding="utf-8") as f:
            data = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        data = []

    data.append(entry)

    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

def main():
    print("üåç –í—ñ—Ç–∞—é —É —Å–∏—Å—Ç–µ–º—ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –µ–∫–æ–ª–æ–≥—ñ—á–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ üå±")

    def add_custom_sensor_type():
        print("\n‚ûï –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–∏–ø—É —Å–µ–Ω—Å–æ—Ä–∞")
        name = input("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ —Å–µ–Ω—Å–æ—Ä–∞: ").strip()
        unit = input("–í–≤–µ–¥—ñ—Ç—å –æ–¥–∏–Ω–∏—Ü—é –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è: ").strip()
        location = input("–í–∫–∞–∂—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ–Ω—Å–æ—Ä–∞: ").strip()
        min_value = float(input("–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–µ –∑–Ω–∞—á–µ–Ω–Ω—è: "))
        max_value = float(input("–í–≤–µ–¥—ñ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–µ –∑–Ω–∞—á–µ–Ω–Ω—è: "))
        sensor_type = SensorType(name, unit)
        return sensor_type, location, min_value, max_value

    custom_sensor_type, custom_location, min_limit, max_limit = add_custom_sensor_type()
    custom_limits = {custom_sensor_type.name: (min_limit, max_limit)}

    temperature = SensorType("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "¬∞C")
    co2 = SensorType("CO2", "ppm")
    pm25 = SensorType("PM2.5", "¬µg/m¬≥")
    humidity = SensorType("–í–æ–ª–æ–≥—ñ—Å—Ç—å", "%")

    available_types = {
        "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": temperature,
        "CO2": co2,
        "PM2.5": pm25,
        "–í–æ–ª–æ–≥—ñ—Å—Ç—å": humidity,
        custom_sensor_type.name: custom_sensor_type
    }

    sensors = [
        Sensor("S1", temperature, "–¶–µ–Ω—Ç—Ä"),
        Sensor("S2", co2, "–ü—Ä–æ–º–∑–æ–Ω–∞"),
        Sensor("S3", pm25, "–ñ–∏—Ç–ª–æ–≤–∏–π —Ä–∞–π–æ–Ω"),
        Sensor("S4", humidity, "–ü–∞—Ä–∫"),
        Sensor("S5", custom_sensor_type, custom_location)
    ]

    while True:
        print("\nüìå –Ø–∫–∏–π –µ–∫–æ–ª–æ–≥—ñ—á–Ω–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?")
        print("(–æ–±–µ—Ä—ñ—Ç—å: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, CO2, PM2.5, –í–æ–ª–æ–≥—ñ—Å—Ç—å –∞–±–æ", custom_sensor_type.name, ")")
        print("–∞–±–æ –≤–≤–µ–¥—ñ—Ç—å '–î—è–∫—É—é —Ç–æ–±—ñ, –Ω–∞ —Ü—å–æ–º—É –≤—Å–µ' ‚Äî –¥–ª—è –≤–∏—Ö–æ–¥—É")

        choice = input("üëâ –í–∞—à –≤–∏–±—ñ—Ä: ").strip()

        if choice == "–î—è–∫—É—é —Ç–æ–±—ñ, –Ω–∞ —Ü—å–æ–º—É –≤—Å–µ":
            print("\nüíö –î—è–∫—É—é! –ë–µ—Ä–µ–∂—ñ—Ç—å —Å–µ–±–µ —ñ –¥–æ–≤–∫—ñ–ª–ª—è!")
            break

        if choice not in available_types:
            print("‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            continue

        selected_type = available_types[choice]
        collector = DataCollector()

        for sensor in sensors:
            if sensor.sensor_type.name == selected_type.name:
                collector.collect(sensor)

        valid_data = []
        for entry in collector.data:
            try:
                validated_value = validate_value(entry["value"], entry["type"])
                recommendation = get_recommendation(entry["type"], validated_value)
                entry["timestamp"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                entry["recommendation"] = recommendation
                save_to_json(entry)
                valid_data.append(entry)
            except ValueError as e:
                print(f"‚ö†Ô∏è {e}")

        print(f"\nüìä [–ó–≤—ñ—Ç –ø–æ –ø–æ–∫–∞–∑–Ω–∏–∫—É: {selected_type.name}]")
        for entry in valid_data:
            print(
                f"üìç {entry['location']} ‚Äì {entry['type']}: {entry['value']:.2f} {entry['unit']}\n"
                f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: {entry['recommendation']}\n"
            )

        try:
            with open("eco_log.json", "r", encoding="utf-8") as f:
                saved_data = json.load(f)[-len(valid_data):]

            if verify_reports(valid_data, saved_data):
                print("‚úÖ –ó–≤—ñ—Ç —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ: –≤—Å—ñ –¥–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –∑—ñ–±—Ä–∞–Ω–∏–º.")
            else:
                print("‚ùå –ü–æ–º–∏–ª–∫–∞ —É –∑–≤—ñ—Ç—ñ: –¥–µ—è–∫—ñ –¥–∞–Ω—ñ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –∑—ñ–±—Ä–∞–Ω–∏–º.")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–≤—ñ—Ç: {e}")

        add_more = input("\nüîÅ –ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–∏–ø —Å–µ–Ω—Å–æ—Ä–∞? (—Ç–∞–∫/–Ω—ñ): ").strip().lower()
        if add_more == "—Ç–∞–∫":
            new_sensor_type, new_location, min_val, max_val = add_custom_sensor_type()
            available_types[new_sensor_type.name] = new_sensor_type
            sensors.append(Sensor(f"S{len(sensors)+1}", new_sensor_type, new_location))
            custom_limits[new_sensor_type.name] = (min_val, max_val)

if __name__ == "__main__":
    main()